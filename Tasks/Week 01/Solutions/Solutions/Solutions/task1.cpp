/**
    Задание:

    Няма как да с разминете с "Hello, World!", така че създайте програма, която изкарва на 
    екрана същото съобщение (други видове съобщения няма да бъдат приети и ще бъдете автоматично скъсани..).

    След това може да въведете нечие друго име и да го поздравите него на екрана.
*/


/**
    Библиотеката iostream съдържа обекти (т.н. потоци), които позволяват
    на програмата да комуникира с периферните устройства: екрана и клавиатурата.
*/
#include <iostream> 

/**
    Библиотеката string ни предоставя възможността да работим със символни низове.
    Символните низове са просто последователност от символи, които ние възприемаме
    като текст. Все пак не всичко в живота са числа.
*/
#include <string>
using namespace std;


int main()
{
    /**
        cout е обекта, който осъществява връзката на програмата с конзолата. << е оператора, с който подаваме неща (стоящи от дясно)
        на обекта (стоящ от ляво). По подразбиране могат да се изписват вградените типове данни (int, float, bool etc.), ц-низове,
        низове от библиотеката string и литерални символни низове.

        Едно нещо наричаме литерал ако е буквално написана стойност в кода, както тук принтираме на конзолата литерален низ "Hello, World!\n"

        В един символен низ комбинацията от '\' и някакъв знак се счита за един символ и е вид команда, както \n (new line) е команда за нов ред.

        Друг начин за вмъкване на нов ред е << endl; (end line)
    */
    cout << "Hello World!\n";

    /**
        Във втората част на задачата се изисква да се въведе име и да се изпише на екрана определеното съобщение
    */

    //В този ред на мисли ние трябва да си създадем променлива, в която да запишем какво сме въвели и тя да е от правилния тип
    string name;
    

    /**
       Удобно е да принтирате на конзолата какво ще въвеждате, за да не се чудите какво се случва. Внимавайте да не сбъркате съобщението,
       защото ако изпише че въвеждате име, а въвеждате число на следващия ред, ще се чудите защо не бачка..
    */
    cout << "Enter name: ";
    /**
        Както обекта cout се ползва за комуникация между конзолата и програмата за изписване, така имаме и обекта cin, който
        използваме за въвеждане на неща от клавиатурата в програмата. >> e оператора за форматирано извличане, което ще рече, че
        ще прочете един символен низ въведен от клавиатурата до първия бял символ (нов ред, разстояние и др.). След това ще види 
        в какво сме му казали да го пъхне (променливата, която стои от дясно на оператора >>) и ще го конвертира в този тип, ако 
        може. Например ако въведем на екрана 123 то първоначално за потока това е поредица от символи. След като го извлече, ще види
        къде искаме да го пъхне:
            * ако отдясно стои int, float, double, ще го конвертира в число
            * ако стои някакъв символен низ ще го копира като такъв
            * ако е булева стойност ще го преобразува в стойност true(1)
       Но ако бяхме въвели символния низ abc и искаме да го "пъхнем" в числена променлива програмата ще изгърми, защото cin не знае
       как да преобразува abc в число. За любопитните, които се чудят дали не можем по някакъв начин да кажем на оператора да прави такива 
       идиотщини, да може. Нарича се предефиниране на оператори, с което ще се занимаваме по СДП.
    */
    cin >> name;

    /**
        Можем да подаваме последователно няколко различни обекта на cout, като всяко ново нещо го отделяме с оператора <<. Нещата се изписват
        на екрана от ляво надясно. В случа първо ще изпише литералния низ "Hello, ", после стойността на символния низ name, след това литералния
        символ '!' и накрая ще сложи нов ред заради командата endl. Обърнете внимание че символните низове се заграждат с кавички ("), а единичен 
        символ с апостроф (').
    */
    cout << "Hello, " << name << '!' << endl;
}

